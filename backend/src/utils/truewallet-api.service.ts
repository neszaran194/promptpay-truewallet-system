import { Injectable } from '@nestjs/common';

interface TrueWalletRedeemResponse {
  amount: number;
  owner_full_name: string;
  code: string;
}

@Injectable()
export class TrueWalletApiService {

  async redeemVoucher(phone: string, voucherData: string): Promise<TrueWalletRedeemResponse> {
    // Validate phone number
    const cleanPhone = (phone + "").trim();
    if (!cleanPhone.length || cleanPhone.match(/\D/)) {
      throw new Error("INVALID_PHONE");
    }

    // Process voucher
    const parts = (voucherData + "").split("v=");
    const voucherMatch = (parts[1] || parts[0]).match(/[0-9A-Za-z]+/);

    if (!voucherMatch) {
      throw new Error("INVALID_VOUCHER_FORMAT");
    }

    const voucher = voucherMatch[0];

    if (voucher.length !== 35) {
      throw new Error("INVALID_VOUCHER");
    }

    try {
      // Make the API request to TrueWallet
      const response = await fetch(
        `https://gift.truemoney.com/campaign/vouchers/${voucher}/redeem`,
        {
          method: "POST",
          headers: {
            "content-type": "application/json",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
          },
          body: JSON.stringify({
            mobile: cleanPhone,
            voucher_hash: voucher
          })
        }
      );

      if (!response.ok) {
        const errorCode = `HTTP_ERROR_${response.status}`;
        console.log(`üö´ TrueWallet API Error: ${errorCode}`);
        throw new Error(this.translateError(errorCode));
      }

      const data = await response.json();

      // Process the response
      if (data.status && data.status.code === "SUCCESS") {
        return {
          amount: Number(data.data.my_ticket.amount_baht.replace(/,/g, '')),
          owner_full_name: data.data.owner_profile.full_name,
          code: voucher
        };
      }

      // Handle TrueWallet specific errors
      const errorCode = data.status?.code || 'UNKNOWN_ERROR';
      throw new Error(this.translateError(errorCode));

    } catch (error) {
      if (error instanceof Error) {
        throw error;
      }
      throw new Error('NETWORK_ERROR');
    }
  }

  private translateError(errorCode: string): string {
    const errorMessages: { [key: string]: string } = {
      'INVALID_PHONE': '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
      'INVALID_VOUCHER': '‡πÇ‡∏Ñ‡πâ‡∏î‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
      'INVALID_VOUCHER_FORMAT': '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
      'VOUCHER_NOT_FOUND': '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤‡∏ô‡∏µ‡πâ',
      'VOUCHER_EXPIRED': '‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß',
      'VOUCHER_USED': '‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
      'RECIPIENT_NOT_FOUND': '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö TrueWallet',
      'NETWORK_ERROR': '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠',
      'LIMIT_EXCEEDED': '‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏ã‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô',
      'HTTP_ERROR_400': '‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏',
      'HTTP_ERROR_401': '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏ã‡∏≠‡∏á‡∏ô‡∏µ‡πâ',
      'HTTP_ERROR_403': '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò',
      'HTTP_ERROR_404': '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
      'HTTP_ERROR_429': '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà',
      'HTTP_ERROR_500': '‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå TrueWallet ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    };

    return errorMessages[errorCode] || `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorCode}`;
  }

  validateVoucherCode(voucherData: string): { isValid: boolean; cleanCode: string; type: 'url' | 'code' } {
    try {
      const parts = (voucherData + "").split("v=");
      const voucherMatch = (parts[1] || parts[0]).match(/[0-9A-Za-z]+/);

      if (!voucherMatch) {
        return { isValid: false, cleanCode: '', type: 'code' };
      }

      const voucher = voucherMatch[0];
      const isUrl = voucherData.includes('gift.truemoney.com') || voucherData.includes('v=');

      return {
        isValid: voucher.length === 35,
        cleanCode: voucher,
        type: isUrl ? 'url' : 'code'
      };
    } catch {
      return { isValid: false, cleanCode: '', type: 'code' };
    }
  }
}